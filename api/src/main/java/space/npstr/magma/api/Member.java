/*
 * Copyright 2018 Dennis Neufeld
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package space.npstr.magma.api;

import org.immutables.value.Value;

/**
 * Created by napster on 23.05.18.
 * <p>
 * Discord supports one single audio connection per user and guild (also called a "member").
 * This means, an audio connection is exactly identified by those two datapoints,
 * and all of the methods of Magma require those to correctly identify the connection
 * that you want to open/close/change something about.
 * <p>
 * This is the class that composes the user id and guild id to identify such a member.
 * <p>
 * Build one of these by using the autogenerated builder like so:
 * <pre>
 * {@code
 * Member someMember = MagmaMember.builder()
 *      .userId("...")
 *      .guildId("...")
 *      .build();
 * }
 * </pre>
 */
@Value.Immutable
@Value.Style(
        typeAbstract = "*",
        typeImmutable = "Magma*"
)
public abstract class Member {

    /**
     * Discord snowflake detailing the user of this member
     */
    public abstract String getUserId();

    /**
     * Discord snowflake detailing the guild of this member
     */
    public abstract String getGuildId();


    @Value.Check
    protected void stringsNotEmpty() {
        final String userId = this.getUserId();
        if (userId.isEmpty()) {
            throw new IllegalArgumentException("Provided user id is empty!");
        }
        try {
            //noinspection ResultOfMethodCallIgnored
            Long.parseUnsignedLong(userId);
        } catch (final NumberFormatException e) {
            throw new IllegalArgumentException("Provided user id '" + userId + "' is not a valid discord snowflake.");
        }


        final String guildId = this.getGuildId();
        if (guildId.isEmpty()) {
            throw new IllegalArgumentException("Provided guild id is empty!");
        }

        try {
            //noinspection ResultOfMethodCallIgnored
            Long.parseUnsignedLong(guildId);
        } catch (final NumberFormatException e) {
            throw new IllegalArgumentException("Provided guild id '" + guildId + "' is not a valid discord snowflake.");
        }
    }
}
