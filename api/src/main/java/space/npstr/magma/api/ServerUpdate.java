/*
 * Copyright 2018 Dennis Neufeld
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package space.npstr.magma.api;

import org.immutables.value.Value;

/**
 * Created by napster on 23.05.18.
 * <p>
 * Build one of these by using the autogenerated builder like so:
 * <pre>
 * {@code
 * ServerUpdate serverUpdate = MagmaServerUpdate.builder()
 *      .sessionId("...")
 *      .endpoint("...")
 *      .token("...")
 *      .build();
 * }
 * </pre>
 */
@Value.Immutable
@Value.Style(
        typeAbstract = "*",
        typeImmutable = "Magma*"
)
public abstract class ServerUpdate {

    /**
     * The session id of the voice state of the member to which this server update belongs.
     */
    public abstract String getSessionId();

    /**
     * The endpoint to connect to. If the event you received from Discord has no endpoint, you can safely
     * discard it, until you received one with a valid endpoint. Can be extracted from the op 0
     * VOICE_SERVER_UPDATE event.
     */
    public abstract String getEndpoint();

    /**
     * Token that can be extracted from the op 0 VOICE_SERVER_UPDATE event.
     */
    public abstract String getToken();


    @Value.Check
    protected void stringsNotEmpty() {
        if (this.getSessionId().isEmpty()) {
            throw new IllegalArgumentException("Provided session id is empty!");
        }
        if (this.getEndpoint().isEmpty()) {
            throw new IllegalArgumentException("Provided endpoint is empty!");
        }
        if (this.getToken().isEmpty()) {
            throw new IllegalArgumentException("Provided token is empty!");
        }
    }
}
