buildscript {
    ext {
        grgitVersion = '2.3.0'
        aptPluginVersion = '0.19'
        sonarqubeVersion = '2.6.2'
        versionsVersion = '0.20.0'
    }
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
        mavenCentral()
    }
    dependencies {
        classpath "org.ajoberstar:grgit:${grgitVersion}"
        classpath "net.ltgt.gradle:gradle-apt-plugin:${aptPluginVersion}"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubeVersion}"
        classpath "com.github.ben-manes:gradle-versions-plugin:${versionsVersion}"
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'net.ltgt.apt-idea'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'
apply plugin: 'com.github.ben-manes.versions'


group = "space.npstr.magma"
version = "${versionFromTag()}"

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

ext {
    //@formatter:off
    gradleVersion               = '4.10.2'
    jacocoVersion               = '0.8.2' // the default one, 0.8.1, breaks on java 11+

    orgJsonVersion              = '20180813'
    slf4jVersion                = '1.7.25'

    springVersion               = '5.0.8.RELEASE'
    undertowVersion             = '2.0.14.Final'

    spotbugsVersion             = '3.1.6'
    annotationsVersion          = '0.0.1'

    immutablesVersion           = '2.6.3'

    junitVersion                = '5.2.0'
    logbackVersion              = '1.2.3'

    //@formatter:on
}

dependencies {
    //@formatter:off
    compile             group: 'org.json',              name: 'json',                   version: orgJsonVersion
    compile             group: 'org.slf4j',             name: 'slf4j-api',              version: slf4jVersion

    // project reactor & reactive websocket client
    compile             group: 'org.springframework',   name: 'spring-webflux',         version: springVersion
    compile             group: 'io.undertow',           name: 'undertow-core',          version: undertowVersion

    // annotations
    compileOnly         group: 'com.github.spotbugs',   name: 'spotbugs-annotations',   version: spotbugsVersion
    compileOnly         group: 'space.npstr',           name: 'annotations',            version: annotationsVersion

    // immutable objects, to pass values around
    annotationProcessor group: 'org.immutables',        name: 'value',                  version: immutablesVersion
    compileOnly         group: 'org.immutables',        name: 'value',                  version: immutablesVersion, classifier: 'annotations'

    // testing
    testCompile         group: 'org.junit.jupiter',     name: 'junit-jupiter-api',      version: junitVersion
    testRuntime         group: 'ch.qos.logback',        name: 'logback-classic',        version: logbackVersion
    testRuntime         group: 'org.junit.jupiter',     name: 'junit-jupiter-engine',   version: junitVersion
    //@formatter:on
}

compileJava {
    dependsOn(clean)
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

wrapper {
    gradleVersion = project.ext.gradleVersion
    //noinspection UnnecessaryQualifiedReference
    distributionType = Wrapper.DistributionType.ALL
}


build {
    doLast {
        println 'Version: ' + version
    }
}

test {
    useJUnitPlatform()
    jacoco {
        includes['space.npstr.magma.*']
    }
}

jacoco.toolVersion = jacocoVersion

sonarqube {
    properties {
        property "sonar.inclusions", "src/main/java/space/npstr/magma/**/*"
    }
}

jar.mustRunAfter clean
publishToMavenLocal.dependsOn jar
// called by jitpack
task install {
    dependsOn test
    dependsOn publishToMavenLocal
    doLast {
        println 'Version: ' + version
    }
}
task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier 'sources'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar
            groupId project.group
            artifactId project.name
            version project.version
            pom {
                name = 'Magma'
                description = 'A voice only API for Discord, focused on delivering music at scale.'
                url = 'https://github.com/napstr/Magma'
                licenses {
                    license {
                        name = 'Apache License 2.0'
                        url = 'https://choosealicense.com/licenses/apache-2.0/'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        name = 'Napster'
                        email = 'napster@npstr.space'
                    }
                }
                scm {
                    url = 'https://github.com/napstr/Magma'
                }
            }
        }
    }
}


idea {
    project {
        configureAnnotationProcessing = true
    }
    module {
        apt {
            addGeneratedSourcesDirs = true
            addAptDependencies = true
            addCompileOnlyDependencies = false
            mainDependenciesScope = 'PROVIDED'
        }
    }
}

//returns either a git tag if there is one on this commit, or the commit hash, to be used as a version
@SuppressWarnings("GrMethodMayBeStatic")
String versionFromTag() {

    def headTag = grgit.tag.list().find {
        it.commit == grgit.head()
    }

    def clean = grgit.status().clean //uncommited changes? -> should be SNAPSHOT

    if (headTag && clean) {
        headTag.getName()
    } else {
        "${grgit.head().id}-SNAPSHOT"
    }
}
